import typing
import pathlib
import ipaddress
import rnet

class ClientOptions(typing.TypedDict, total=False):
    impersonate: typing.Optional[typing.Union[rnet.Impersonate, rnet.ImpersonateOption]]
    user_agent: typing.Optional[str]
    default_headers: typing.Optional[typing.Union[typing.Dict[str, str], rnet.HeaderMap]]
    headers_order: typing.Optional[typing.List[str]]
    referer: typing.Optional[bool]
    allow_redirects: typing.Optional[bool]
    max_redirects: typing.Optional[int]
    cookie_store: typing.Optional[bool]
    lookup_ip_strategy: typing.Optional[rnet.LookupIpStrategy]
    timeout: typing.Optional[int]
    connect_timeout: typing.Optional[int]
    read_timeout: typing.Optional[int]
    no_keepalive: typing.Optional[bool]
    tcp_keepalive: typing.Optional[int]
    tcp_keepalive_interval: typing.Optional[int]
    tcp_keepalive_retries: typing.Optional[int]
    tcp_user_timeout: typing.Optional[int]
    pool_idle_timeout: typing.Optional[int]
    pool_max_idle_per_host: typing.Optional[int]
    pool_max_size: typing.Optional[int]
    http1_only: typing.Optional[bool]
    http2_only: typing.Optional[bool]
    https_only: typing.Optional[bool]
    tcp_nodelay: typing.Optional[bool]
    http2_max_retry_count: typing.Optional[int]
    verify: typing.Optional[typing.Union[bool, pathlib.Path]]
    tls_info: typing.Optional[bool]
    min_tls_version: typing.Optional[rnet.TlsVersion]
    max_tls_version: typing.Optional[rnet.TlsVersion]
    no_proxy: typing.Optional[bool]
    proxies: typing.Optional[typing.List[rnet.Proxy]]
    local_address: typing.Optional[typing.Union[str, ipaddress.IPv4Address, ipaddress.IPv6Address]]
    interface: typing.Optional[str]
    gzip: typing.Optional[bool]
    brotli: typing.Optional[bool]
    deflate: typing.Optional[bool]
    zstd: typing.Optional[bool]
